PYTHON MATPLOTLIB NOTES - 

TO INSTALL LIBRARIES TYPE - python -m pip --user install scipy numpy matplotlib... IN CMD

***TO IMPORT MODULE***
import matplotlib.pyplot as plt
plt.plot([1,2,3],[5,7,4])         //[] are the coordinates
plt.show()

Another way
x = [1,2,3]
y = [4,5,6]
plt.plot(x,y)
plt.show()

***TO ADD LABELS, TITLES AND LEGENDS***
import matplotlib.pyplot as plt
x = [1,2,3]
y = [4,5,6]
x2 = [1,2,3]
y2 = [10,14,12]
plt.plot(x,y, label='First Line')
plt.plot(x2,y2, label='Second Line')
plt.xlabel('X-Axis')		//Adds label to x-axis
plt.ylabel('Y-Axis')		//Adds label to y-axis
plt.title('Graph')		//Adds title to graph
plt.legend()			//To simultaneously draw two or more graphs
plt.show()


***BAR CHARTS AND HISTOGRAM***
BAR CHARTS
import matplotlib.pyplot as plt
x = [1,2,3,4,5,6,40]
y = [10,20,30,4,50,60,44]

x2 = [11,12,13,14,15,16]
y2 = [21,22,23,24,25,26]
plt.bar(x,y, label='Bars1', color='r')
plt.bar(x2,y2, label='Bars2', color='c')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph')	
plt.legend()
plt.show()

HISTOGRAM
import matplotlib.pyplot as plt
population = [22,33,44,55,66,77,88,99,10,101,111,121,125,14,2,6,24,25]		//Values to be plotted
bins = [10,20,30,40,50,60,70,80,90,100,110,120,130]				//Scale on y axis
plt.hist(population, bins, histtype = 'bar', rwidth=0.8)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph')
plt.legend()
plt.show()

***SCATTER PLOTS AND STACK PLOTS***
SCATTER PLOTS
import matplotlib.pyplot as plt
x = [1,2,3,4,5,6,7]
y = [10,20,30,40,50,60,70]
plt.scatter(x,y,label='skitscat', color = 'c', s = 500, marker ='x')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph')
plt.show()

STACK PLOTS
import matplotlib.pyplot as plt
days = [1,2,3,4,5]

sleeping = [7,8,6,11,7]
eating =  [2,3,4 3,2]
playing =  [7,8,7,2,2]
working = [8,5,7,8,13]

plt.plot([],[], color='m', label='sleeping', linewidth='5')
plt.plot([],[], color='c', label='eating', linewidth='5')
plt.plot([],[], color='r', label='playing', linewidth='5')
plt.plot([],[], color='k', label='working', linewidth='5')
plt.stackplot(days, sleeping,eating,playing,working, colors=['m','c','r','k']

plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph')
plt.legend()
plt.show()

***PIE CHARTS***
import matplotlib.pyplot as plt
days = [1,2,3,4,5]

sleeping = [7,8,6,11,7]
eating =  [2,3,4 3,2]
playing =  [7,8,7,2,2]
working = [8,5,7,8,13]

slices = [7,2,2,13]
activities = ['sleeping', 'eating', 'playing', 'working']
cols = ['m','c',r','k']
plt.pie('slices',
	 labels = activities,		
	 color = cols,
	 startangle = 90,		//Starts with 90 degree
	 shadow=True,			//Gives shadow to on the boundaries
	 explode = (0,0.1,0,0),		//Detaches one part from the chart
	 autopct = '%1.1f%%')		//Gives % value of the activity
plt.title('Pie chart')
plt.show()


***IMPORTING DATA FROM FILES*** (USING NUMPY MODULE)
1. First, create a file (.txt) with the some coordinates in it.
#METHOD 1
import matplotlib.pyplot as plt
import csv							//Imports csv module
x = []								//Empty list		
y = []
with open('example.txt', 'r') as csvfile:			//example.txt is the file we want to read and 'r' is the command to read as csvfile
	plots = csv.reader(csvfile, delimiter=',')		//delimiter is used to separate variables
	for row in plots:					//for each row we append values of x and y separated by delimiter
		x.append(int(row[0])) 		
		y.append(int(row[1]))

plt.plot(x,y, label='Imported from file')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph')
plt.legend()
plt.show()

#METHOD 2
import matplotlib.pyplot as plt
import numpy as np							//Imports numpy module

x, y = np.loadtxt('example.txt', delimiter = ',', unpack = True)	//Unpacks the different variables
plt.plot(x,y, label='Imported from file')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph')
plt.legend()
plt.show()


***GETTING DATA OVER THE INTERNET***
import matplotlib.pyplot as plt
import numpy as np
import urllib
import matplotlib.dates as mdates
#FUNCTION
def graph_data(stock):
	stock_price_url = 'http://chartapi.finance.yahoo.com/instrument/1.0/' + stock + '/chardata;type=quote;range=10y/csv;	//Any url can be used but it should have large data
	source_code = urllib.request.urlopen(stock_price_url).read().decode()							//Requests to open the url
	stock_data = []
	split_source = source_code.spit('\n')
	
	for line in split_source:
		split_line = line.split(',')
		if len(split_line)==6:
			if 'values' not in line and 'labels' not in line:
				stock_data.append(line)
	date, closep, highp, openp, lowp, volume = np.loadtxt(stock_data,
								delimiter = ',',
								unpack = True,
								#%Y = full year.2015
								#%y = partial year 15
								#%m = number month
								#%d = number date
								#%H = hours
								#%m = minutes
								#%s = seconds
								#12-06-2014
								#%m-%d-%Y
								#converters = {0:bytespdate2num('%Y%m%d')})
	plt.plot_date(date, closep, '-', label='Price')		//To be used in next program
	plt.xlabel('x')
	plt.ylabel('y')
	plt.title('graph')
	plt.legend()
	plt.show()
graph_data('TSLA')
 

***CONVERTING DATA FROM THE INTERNET***
#WRITE THE FOLLOWING FUNTION IN THE ABOVE FUNCTION
def bytespdate2num(fmt,encoding='utf-8'):			//fmt stands for format and utf-8 is the encoding internet has
	strconverter = mdates.strpdate2num(fmt)			//converts date into string format
	def bytesconverter(b):
		s = b.decode(encoding)				//decodes the bytes according to the encoding
		return strconverter(s)
	return bytesconverter


***BASIC CUSTOMIZATIONS***
import matplotlib.pyplot as plt
from matplotlib import style
x = [Something]
y = [Something]
plt.plot(x,y,label='',linewidth=)
plt.grid(True, color='k')
plt.show()

***SPINES AND HORIZONTAL***
import matplotlib.pyplot as plt
x = [1,2,3]
y = [10,11,12]
ax1 = plt.subplot2grid((1,1),(0,0))
plt.plot(x,y, label = 'Line1', color = 'r')
plt.xlabel('X-Axis')
plt.ylabel('Y-Axis')
ax1.spines['left'].set_color('b')
ax1.spines['top'].set_visible(False)
ax1.spines['left'].set_linewidth(5)
ax1.tick_params(axis='x', color='r')
plt.show()


***LIVE GRAPHS***
import matplotlib.pyplot as plt
from matplotlib import style
import matplot.animation as animation

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)
def animate(i):
	graph_data = open('example.txt','r').read()
	lines = graph_data.split('\n')
	xs = []
	ys = []
	for line in lines:
		if len(line)>1:
			x, y = line.split(',')
			xs.append(x)
			xs.append(y)
	ax1.clear()
	ax1.plot(xs,ys)
ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()


***ANNOTATIONS AND TEXT***
ax1.annotate('Text', (1,5),xytext = (0.8,0.9), textcoords = 'axes fraction'
		arowprops = dict(facecolor = 'grey', color = 'grey')
font_dict = {'family:'serif',
		'color':'darked',
		'size':15}
axi.text(1,5, 'label')

***SUBPLOTS***
import random
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')
fig = plt.figure()

def create_plots():
	xs=[]
	ys=[]
	for i in range(10):
		x = i
		y = random.randrange(10)
		xs.append(x)
		ys.append(y)
	return xs, ys
ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
x, y = create_plots()
ax1.plot(x,y)

x,y = create_plots()
ax2.plot(x, y)
plt.show()


***BASEMAP, ITS CUSTOMIZATION AND PLOTTING COORDINATES***
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap
m = Basemap(projection='mill',
		llcrnrlat = -90,
		llcrnrlon = -180,
		urcrnrlat = 90,
		urcrnrlon = 180,
		resolution ='1')
m.drawcoastlines()
m.drawcountries(linewidth=2)
m.drawstates(color='b')
#m.drawcountries(color='darked')
#m.etopo()
#m.bluemarble()
#m.fillcontinents()

xs=[]
ys=[]
NYClat, NYClon = 40.7127, -74.0059
xpt, ypt = m(NYClon, NYClat)
xs.append(xpt)
ys.append(ypt)
m.plot(xpt, ypt, 'c*', markersize=15)

LAlat, LAlon = 34.05, -118.25
xpt, ypt = m(LAlon, LAlat)
xs.append(xpt)
ys.append(ypt)
m.plot(xpt, ypt, 'g^', markersize=15)

m.plot(xs, ys, color='r', linewidth=5, label='Flight98')
m.drawgreatcircle(NYClon, NYClat, LAlon, LAlat, color='c', linewidth=3, label='Arc')
plt.legend(loc=4)	
plt.title('Basemap Tutorial')
plt.show()


***3D PLOTS AND SCATTER PLOTS***
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt	
fig = plt.figure()
ax1 = fig.add_subplot(111, projection='3d')
x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,2,2,4,9,8,2,5,4]
z = [4,2,2,4,5,7,9,3,1,10]

#ax1.plot_wireframe(x,y,z)		//For simple chart

x2 = [-1,-2,-3,-4,-5,-6,-,7,-8,-9,-10]
y2 = [-5,-6,-2,-1,-7,-8,-10,-5,-7,-1]
z2 = [1,2,6,3,2,4,7,8,5,9]
ax1.scatter(x,y,z, c='g', marker='o')
ax1.scatter(x,y,z, c='r', marker='*')
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')
ax1.set_zlabel('Z-Axis')
plt.show()


***3D BARCHARTS***
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
from mpl_toolkits.mplot3d import axes3d
style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111, projection='3d')
x = [1,2,3,4,5,6,7,8,9,10]
y = [4,1,2,5,7,8,9,6,3,1]
z = np.zeros(10)
dx = np.ones(10)
dy = np.ones(10)
dz = [1,2,3,4,5,6,7,8,9,10]
ax1.bar3d(x,y,x,dx,dy,dz)
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')
ax1.set_zlabel('Z-Axis')
plt.show()

***MORE CHARTS***
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
from mpl_toolkits.mplot3d import axes3d
style.use('fivethirtyeight')
fig = plt.figure()
ax1 = fig.add_subplot(111, projection='3d')
x,y,z = axes3d.get_test_data()
print(axes3d.__file__)
ax1.plot_wireframe(x,y,z,rstride =3, cstride = 3
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')
ax1.set_zlabel('Z-Axis')
plt.show()